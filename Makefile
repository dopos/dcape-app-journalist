# app custom Makefile

# Docker repo & image name without version
IMAGE     ?= mrusme/journalist
# Docker image version
IMAGE_VER ?= latest
# Hostname for external access
APP_SITE  ?= rss.dev.lan
# App names (db/user name etc)
APP_NAME  ?= journalist

# Enable DB usage:
# * Add DB config part to .env.sample
# * Enable db* targets
# * make db-create inside .drone-default target
USE_DB    ?= yes

# Add user config part to .env.sample
ADD_USER  ?= yes

# ------------------------------------------------------------------------------
# app custom config

DCAPE_ROOT   ?= /opt/dcape/var

CONTAINER_ID ?= $(APP_TAG)_app_1

# ------------------------------------------------------------------------------
# .env template (custom part)
# inserted in .env.sample via 'make config'
define CONFIG_CUSTOM
# ------------------------------------------------------------------------------
# app custom config, generated by make config
# db:$(USE_DB) user:$(ADD_USER)

# HTTP proto (based on USE_TLS)
HTTP_PROTO=$(HTTP_PROTO)

# Path to /opt/dcape/var. Used only outside drone
#DCAPE_ROOT=$(DCAPE_ROOT)

endef

# ------------------------------------------------------------------------------
# Find and include DCAPE/apps/drone/dcape-app/Makefile
DCAPE_COMPOSE   ?= dcape-compose
DCAPE_MAKEFILE  ?= $(shell docker inspect -f "{{.Config.Labels.dcape_app_makefile}}" $(DCAPE_COMPOSE))
ifeq ($(shell test -e $(DCAPE_MAKEFILE) && echo -n yes),yes)
  include $(DCAPE_MAKEFILE)
else
  include /opt/dcape-app/Makefile
endif

# -----------------------------------------------------------------------------
## Custom app targets
#:

.PHONY: user-add token-add feed-add

HEADER ?= 'Content-Type: application/json; charset=utf-8'
API ?= $(HTTP_PROTO)://$(APP_SITE)/api/v1
ROLE ?= user

define USER_ADD_DATA
{
  "username": "$(USER)",
  "password": "$(PASS)",
  "role": "$(ROLE)"
}
endef

## Add user
user-add:
	@json=`echo "$$USER_ADD_DATA" | curl -gsd @- -u "$(USER_NAME):$(USER_PASS)" -H $(HEADER) $(API)/users` ; \
	echo $$json ; 

define TOKEN_ADD_DATA
{
  "name": "$(TOKEN_NAME)"
}
endef

## Add token
token-add:
	@json=`echo "$$TOKEN_ADD_DATA" | curl -gsd @- -u "$(USER):$(PASS)" -H $(HEADER) $(API)/tokens` ; \
	echo $$json ; 

define FEED_ADD_DATA
{
  "name": "$(FEED_NAME)",
  "url": "$(FEED_URL)",
  "group": "$(FEED_GROUP)"
}
endef

## Add feed
feed-add:
	@json=`echo "$$FEED_ADD_DATA" | curl -gsd @- -u "$(USER):$(PASS)" -H $(HEADER) $(API)/feeds` ; \
	echo $$json ; 


#	printf "%s" "$$json" ; \
#	printf "%s" "$$json" | jq '.success' | grep "false" > /dev/null || echo "RET"
